<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_unpack/cvs-sources/">
<chapter>
<title>CVS源</title>

<body>
<p>
不使用源码包，在Gentoo中也可以直接使用上游的CVS服务
. 当我们需要在正常基础上测试未发行的软件包快照时，
使用CVS会为您提供很多方便.
</p>
</body>

<section>
<title>采用CVS源的劣势</title>
<body>

<p>
注意使用CVS的ebuilds通常<b>n不被</b>添加到Portage树
(除非是写在<c>package.mask</c>), 理由如下:
</p>

<ul>
  <li>
  上游的CVS服务可能远没有我们的镜像系统更值得信赖.
  </li>
  <li>
  使用CVS的ebuilds对服务器会产生很重的负载<d/>不是因为CVS没有镜像化,
  而是提供CVS检出的过程中服务器的负载，通常会比简单的使用HTTP或FTP要重得多.
  </li>
  <li>
  装有强壮防火墙的用户应该也不能用CVS.
  </li>
</ul>

<p>
可以通过创建快照的方式使用CVS，事实上这样也会更安全.例如,可以如下创建vim的snapshots:
</p>

<pre>
$ cvs -z3 -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/vim export -r HEAD vim
</pre>
</body>
</section>

<section>
<title>采用CVS活动源的劣势</title>
<body>

<p>
(这个地方应该重新考虑)CVS ebuilds which work against CVS <c>HEAD</c> rather than a specific
date or revision are even worse candidates for tree inclusion:
</p>

<ul>
  <li>
  很难保证上游的CVS确实就是按照给的方案构建的;它们中很多可能会导致QA问题.
  </li>
  <li>
   当你提交报告，注明你自己安装的错误时，不方便向下跟踪bugs.
  </li>
  <li>
  很多上游的包维护者们会不乐意那些不愿意使用他们某个发行版的人们.
  </li>
</ul>

</body>
</section>

<section>
<title>使用CVS源</title>
<body>

<p>
必须先在inherit区声明继承<c>cvs.eclass</c>后才能使用CVS,并需要设置相关的变量.
以下的变量会非常有用:
</p>

<table>
  <tr>
    <th>变量名</th>
    <th>意义</th>
    <th>实例</th>
  </tr>
  <tr>
    <ti><c>ECVS_SERVER</c></ti>
    <ti>CVS服务器地址及路径</ti>
    <ti><c>"cvs.sourceforge.net:/cvsroot/vim"</c></ti>
  </tr>
  <tr>
    <ti><c>ECVS_MODULE</c></ti>
    <ti>模块</ti>
    <ti><c>"vim"</c></ti>
  </tr>
  <tr>
    <ti><c>ECVS_BRANCH</c></ti>
    <ti>分支</ti>
    <ti><c>"HEAD"</c></ti>
  </tr>
  <tr>
    <ti><c>ECVS_AUTH</c></ti>
    <ti>授权方法</ti>
    <ti><c>"ext"</c></ti>
  </tr>
  <tr>
    <ti><c>ECVS_USER</c></ti>
    <ti>用户名</ti>
    <ti><c>"anoncvs"</c></ti>
  </tr>
  <tr>
    <ti><c>ECVS_PASS</c></ti>
    <ti>密码</ti>
    <ti><c>""</c></ti>
  </tr>
  <tr>
    <ti><c>ECVS_TOPDIR</c></ti>
    <ti>欲解压路径</ti>
    <ti><c>"${DISTDIR}/cvs-src/${ECVS_MODULE}"</c></ti>
  </tr>
</table>

<p>
欲知更详细的选项，请参考相应的eclass文件.
想要执行真正的检出,可调用<c>cvs_src_unpack</c>函数.
</p>

<p>
请看此例,基于vim.eclass中的CVS options:
</p>

<codesample lang="ebuild">
inherit cvs

SRC_URI=""

src_unpack() {
    ECVS_SERVER="cvs.sourceforge.net:/cvsroot/vim"
    ECVS_USER="anonymous"
    ECVS_PASS=""
    ECVS_AUTH="pserver"
    if [[ $(get_major_version ) -ge 7 ]] ; then
        ECVS_MODULE="vim7"
    else
        ECVS_MODULE="vim"
    fi
    ECVS_TOP_DIR="${DISTDIR}/cvs-src/${ECVS_MODULE}"
    cvs_src_unpack
}
</codesample>

<p>
再来一例, 基于<c>emacs-cvs</c>的ebuild,
它依赖eclass默认提供的<c>src_unpack</c>; 
这个更简单但不如上面的灵活:
</p>

<codesample lang="ebuild">
inherit cvs

ECVS_AUTH="ext"
CVS_RSH="ssh"
ECVS_SERVER="savannah.gnu.org:/cvsroot/emacs"
ECVS_MODULE="emacs"
ECVS_BRANCH="emacs-unicode-2"
ECVS_USER="anoncvs"
ECVS_PASS=""
ECVS_CVS_OPTIONS="-dP"

# ...and so on. No src_unpack() is specified.
</codesample>

</body>
</section>

</chapter>
</guide>
